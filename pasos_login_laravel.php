<!-- Paso 1: Configuraci√≥n del Modelo
Laravel utiliza el modelo User por defecto para la autenticaci√≥n. Dado que en tu base de datos la tabla se llama usuarios_sistema, debemos crear un modelo personalizado que apunte a esta tabla.

Crear el Modelo:

Ejecuta el siguiente comando en la terminal:

bash
Copiar
Editar
php artisan make:model Usuario
Configurar el Modelo:

Abre el archivo app/Models/Usuario.php y config√∫ralo de la siguiente manera:

php
Copiar
Editar
<?php

namespace App\Models;

use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class Usuario extends Authenticatable
{
    use Notifiable;

    protected $table = 'usuarios_sistema';
    protected $primaryKey = 'id_usuario';
    public $timestamps = false;

    protected $fillable = [
        'login',
        'contrase√±a',
    ];

    protected $hidden = [
        'contrase√±a',
    ];

    public function getAuthPassword()
    {
        return $this->contrase√±a;
    }
}
Este modelo indica que la tabla usuarios_sistema ser√° utilizada para la autenticaci√≥n y define el campo contrase√±a como el utilizado para la autenticaci√≥n.

üîß Paso 2: Configuraci√≥n del Proveedor de Autenticaci√≥n
Laravel utiliza un proveedor de autenticaci√≥n para determinar c√≥mo se autentican los usuarios. Debemos configurar Laravel para usar el modelo Usuario en lugar del modelo User por defecto.

Configurar el Proveedor:

Abre el archivo config/auth.php y modifica la secci√≥n providers para que apunte a nuestro modelo Usuario:

php
Copiar
Editar
'providers' => [
    'users' => [
        'driver' => 'eloquent',
        'model' => App\Models\Usuario::class,
    ],
],
üîß Paso 3: Creaci√≥n del Controlador de Autenticaci√≥n
Necesitamos un controlador que maneje el inicio de sesi√≥n. Podemos crear uno personalizado o extender el controlador Auth\LoginController de Laravel.
documentacionlaravel.com
+1
isaiismael.github.io
+1

Crear el Controlador:

Ejecuta el siguiente comando en la terminal:

bash
Copiar
Editar
php artisan make:controller Auth/LoginController
Configurar el Controlador:

Abre el archivo app/Http/Controllers/Auth/LoginController.php y config√∫ralo de la siguiente manera:

php
Copiar
Editar
<?php

namespace App\Http\Controllers\Auth;

use App\Models\Usuario;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Http\Controllers\Controller;

class LoginController extends Controller
{
    public function showLoginForm()
    {
        return view('auth.login');
    }

    public function login(Request $request)
    {
        $request->validate([
            'login' => 'required',
            'contrase√±a' => 'required',
        ]);

        $usuario = Usuario::where('login', $request->login)->first();

        if ($usuario && $usuario->contrase√±a == $request->contrase√±a) {
            Auth::login($usuario);
            return redirect()->intended('/home');
        }

        return back()->withErrors([
            'login' => 'Las credenciales no coinciden con nuestros registros.',
        ]);
    }

    public function logout()
    {
        Auth::logout();
        return redirect('/');
    }
}
Este controlador maneja la visualizaci√≥n del formulario de inicio de sesi√≥n, la autenticaci√≥n del usuario y el cierre de sesi√≥n.

üîß Paso 4: Creaci√≥n de las Rutas
Debemos definir las rutas que manejar√°n el inicio de sesi√≥n y el cierre de sesi√≥n.

Definir las Rutas:

Abre el archivo routes/web.php y agrega las siguientes rutas:

php
Copiar
Editar
use App\Http\Controllers\Auth\LoginController;

Route::get('login', [LoginController::class, 'showLoginForm'])->name('login');
Route::post('login', [LoginController::class, 'login']);
Route::post('logout', [LoginController::class, 'logout'])->name('logout');
üîß Paso 5: Creaci√≥n de la Vista de Login
Necesitamos una vista que contenga el formulario de inicio de sesi√≥n.

Crear la Vista:

Crea un archivo llamado login.blade.php en la carpeta resources/views/auth con el siguiente contenido:

html
Copiar
Editar
<form method="POST" action="{{ url('login') }}">
    @csrf
    <div>
        <label for="login">Login</label>
        <input type="text" name="login" id="login" value="{{ old('login') }}" required>
        @error('login')
            <div>{{ $message }}</div>
        @enderror
    </div>
    <div>
        <label for="contrase√±a">Contrase√±a</label>
        <input type="password" name="contrase√±a" id="contrase√±a" required>
        @error('contrase√±a')
            <div>{{ $message }}</div>
        @enderror
    </div>
    <button type="submit">Iniciar sesi√≥n</button>
</form>
‚úÖ Resumen
Modelo: Creamos un modelo Usuario que apunte a la tabla usuarios_sistema y defina el campo contrase√±a como el utilizado para la autenticaci√≥n.

Proveedor de Autenticaci√≥n: Configuramos Laravel para usar el modelo Usuario en lugar del modelo User por defecto.

Controlador: Creamos un controlador LoginController que maneje el inicio de sesi√≥n y el cierre de sesi√≥n.

Rutas: Definimos las rutas necesarias para el inicio de sesi√≥n y el cierre de sesi√≥n.

Vista: Creamos una vista login.blade.php que contenga el formulario de inicio de sesi√≥n.

Con esta estructura, tendr√°s un sistema de inicio de sesi√≥n funcional en Laravel utilizando la tabla usuarios_sistema de tu base de datos sportzone. -->